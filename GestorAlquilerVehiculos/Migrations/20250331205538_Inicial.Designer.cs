// <auto-generated />
using System;
using GestorAlquilerVehiculos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestorAlquilerVehiculos.Migrations
{
    [DbContext(typeof(GestorAlquilerVehiculosDbContext))]
    [Migration("20250331205538_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.CargoAdicional", b =>
                {
                    b.Property<int>("CargoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CargoID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Monto")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ReservaID")
                        .HasColumnType("int");

                    b.HasKey("CargoID");

                    b.HasIndex("ReservaID");

                    b.ToTable("CargosAdicionales");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.ClienteReserva", b =>
                {
                    b.Property<int>("ClienteReservaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteReservaID"));

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ClienteReservaID");

                    b.ToTable("ClientesReserva");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.EntregaDevolucion", b =>
                {
                    b.Property<int>("EntregaDevolucionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntregaDevolucionID"));

                    b.Property<decimal>("CargosAdicionales")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("EstadoFinal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoInicial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservaID")
                        .HasColumnType("int");

                    b.HasKey("EntregaDevolucionID");

                    b.HasIndex("ReservaID");

                    b.ToTable("EntregasDevoluciones");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Mantenimiento", b =>
                {
                    b.Property<int>("MantenimientoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MantenimientoID"));

                    b.Property<decimal>("Costo")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaMantenimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehiculoID")
                        .HasColumnType("int");

                    b.HasKey("MantenimientoID");

                    b.HasIndex("VehiculoID");

                    b.ToTable("Mantenimientos");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Notificacion", b =>
                {
                    b.Property<int>("NotificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificacionID"));

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Leido")
                        .HasColumnType("bit");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservaID")
                        .HasColumnType("int");

                    b.HasKey("NotificacionID");

                    b.HasIndex("ReservaID");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Reporte", b =>
                {
                    b.Property<int>("ReporteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReporteID"));

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("datetime2");

                    b.Property<string>("TipoReporte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ReporteID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Reportes");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Reserva", b =>
                {
                    b.Property<int>("ReservaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservaID"));

                    b.Property<int?>("ClienteReservaID")
                        .HasColumnType("int");

                    b.Property<decimal>("CostoTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsuarioID")
                        .HasColumnType("int");

                    b.Property<int>("VehiculoID")
                        .HasColumnType("int");

                    b.HasKey("ReservaID");

                    b.HasIndex("ClienteReservaID");

                    b.HasIndex("UsuarioID");

                    b.HasIndex("VehiculoID");

                    b.ToTable("Reservas", t =>
                        {
                            t.HasCheckConstraint("CK_Reserva_ClienteOUsuario", "(UsuarioID IS NOT NULL AND ClienteReservaID IS NULL) OR (UsuarioID IS NULL AND ClienteReservaID IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioID"));

                    b.Property<string>("ContrasenaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsuarioID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Vehiculo", b =>
                {
                    b.Property<int>("VehiculoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehiculoID"));

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagenURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("PrecioPorDia")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("VehiculoID");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.CargoAdicional", b =>
                {
                    b.HasOne("GestorAlquilerVehiculos.Models.Reserva", "Reserva")
                        .WithMany("CargosAdicionales")
                        .HasForeignKey("ReservaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.EntregaDevolucion", b =>
                {
                    b.HasOne("GestorAlquilerVehiculos.Models.Reserva", "Reserva")
                        .WithMany("EntregasDevoluciones")
                        .HasForeignKey("ReservaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Mantenimiento", b =>
                {
                    b.HasOne("GestorAlquilerVehiculos.Models.Vehiculo", "Vehiculo")
                        .WithMany("Mantenimientos")
                        .HasForeignKey("VehiculoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Notificacion", b =>
                {
                    b.HasOne("GestorAlquilerVehiculos.Models.Reserva", "Reserva")
                        .WithMany("Notificaciones")
                        .HasForeignKey("ReservaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Reporte", b =>
                {
                    b.HasOne("GestorAlquilerVehiculos.Models.Usuario", "Usuario")
                        .WithMany("Reportes")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Reserva", b =>
                {
                    b.HasOne("GestorAlquilerVehiculos.Models.ClienteReserva", "ClienteReserva")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteReservaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestorAlquilerVehiculos.Models.Usuario", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestorAlquilerVehiculos.Models.Vehiculo", "Vehiculo")
                        .WithMany("Reservas")
                        .HasForeignKey("VehiculoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClienteReserva");

                    b.Navigation("Usuario");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.ClienteReserva", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Reserva", b =>
                {
                    b.Navigation("CargosAdicionales");

                    b.Navigation("EntregasDevoluciones");

                    b.Navigation("Notificaciones");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Usuario", b =>
                {
                    b.Navigation("Reportes");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("GestorAlquilerVehiculos.Models.Vehiculo", b =>
                {
                    b.Navigation("Mantenimientos");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
