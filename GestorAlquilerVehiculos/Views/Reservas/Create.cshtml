@model GestorAlquilerVehiculos.Models.Reserva
@{
    ViewData["Title"] = "Reservar Vehículo";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var vehiculosInfo = ViewData["VehiculosInfo"] as Dictionary<int, decimal>;
    var vehiculosImagen = ViewData["VehiculosImagen"] as Dictionary<int, string>;
    var nombreCliente = ViewBag.NombreCliente as string;
    var reservasExistentes = ViewData["ReservasExistentes"] as string;
}

<h2 class="text-center my-4">Reservar Vehículo</h2>

<div class="container">
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    <form asp-action="Create" method="post" class="p-4 shadow rounded bg-white">
        @Html.AntiForgeryToken()

        <div class="form-group mb-3">
            <label>Cliente</label>
            <input type="text" class="form-control" value="@nombreCliente" readonly />
        </div>
        <input type="hidden" asp-for="ClienteReservaID" />

        <div class="row">
            <div class="col-md-6 mb-3">
                <label asp-for="VehiculoID">Vehículo - Precio por Día</label>
                <select asp-for="VehiculoID" class="form-control" asp-items="ViewBag.VehiculoID" id="vehiculoSelect">
                    <option value="">-- Selecciona un vehículo --</option>
                </select>
                <span asp-validation-for="VehiculoID" class="text-danger"></span>
            </div>

            <div class="col-md-6 mb-3 text-center">
                <label>Imagen</label>
                <div class="border rounded p-2">
                    <img id="vehiculoImage"
                         src="~/images/placeholder.png"
                         alt="Imagen Vehículo"
                         class="img-fluid"
                         style="max-height:200px;" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label>Fecha de Inicio</label>
                <input type="date" id="fechaInicioDate" class="form-control" />
                <div id="fechaErrorMsg" class="text-danger mt-1" style="display: none;">
                    Este vehículo no está disponible en las fechas seleccionadas
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <label>Cantidad de Días</label>
                <input type="number" id="diasSelect" class="form-control" min="1" value="1" />
            </div>
        </div>

        <div class="form-group mb-3">
            <label asp-for="FechaFin">Fecha de Entrega</label>
            <input asp-for="FechaFin" type="datetime-local" class="form-control" id="fechaFinVisible" readonly />
            <span asp-validation-for="FechaFin" class="text-danger"></span>
        </div>

        <input type="hidden" asp-for="FechaInicio" id="fechaInicio" />
        <div class="form-group mb-3">
            <label asp-for="CostoTotal">Costo Total (₡)</label>
            <input asp-for="CostoTotal" type="number" step="0.01" class="form-control" id="CostoTotal" readonly />
            <span asp-validation-for="CostoTotal" class="text-danger"></span>
        </div>
        <input type="hidden" asp-for="Estado" value="Pendiente" />
        <input type="hidden" asp-for="FechaRegistro" value="@DateTime.Now:yyyy-MM-ddTHH:mm:ss" />

        <div class="form-group text-center mt-4">
            <button type="submit" class="btn btn-primary px-4" id="btnReservar" disabled>Reservar</button>
            <a asp-controller="Home" asp-action="Index" class="btn btn-secondary px-4 ms-2">Cancelar</a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const preciosVehiculos   = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(vehiculosInfo));
        const imagenesVehiculos  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(vehiculosImagen));
        const reservasExistentes = @Html.Raw(reservasExistentes);

        const vehiculoSelect     = document.getElementById("vehiculoSelect");
        const fechaInicioDate    = document.getElementById("fechaInicioDate");
        const diasSelect         = document.getElementById("diasSelect");
        const costoTotalInput    = document.getElementById("CostoTotal");
        const fechaInicioInput   = document.getElementById("fechaInicio");
        const fechaFinVisible    = document.getElementById("fechaFinVisible");
        const vehiculoImage      = document.getElementById("vehiculoImage");
        const btnReservar        = document.getElementById("btnReservar");
        const fechaErrorMsg      = document.getElementById("fechaErrorMsg");

        const hoy = new Date();
        fechaInicioDate.min = hoy.toISOString().split('T')[0];
        fechaInicioDate.value = hoy.toISOString().split('T')[0];

        function verificarDisponibilidad(vehiculoId, fechaInicio, fechaFin) {
            if (!vehiculoId || !fechaInicio || !fechaFin) {
                return true; 
            }

            const inicio = new Date(fechaInicio);
            const fin = new Date(fechaFin);

            return !reservasExistentes.some(r => {
                if (r.VehiculoID != vehiculoId) return false;

                const reservaInicio = new Date(r.FechaInicio);
                const reservaFin = new Date(r.FechaFin);

                return (inicio < reservaFin && fin > reservaInicio);
            });
        }

        function actualizarReserva() {
            const vehiculoId     = vehiculoSelect.value;
            const precioDia      = preciosVehiculos[vehiculoId];
            const imagenUrl      = imagenesVehiculos[vehiculoId] || '/images/placeholder.png';
            vehiculoImage.src    = imagenUrl;

            const fechaInicioVal = fechaInicioDate.value;
            const dias           = parseInt(diasSelect.value) || 0;

            if (!vehiculoId || !fechaInicioVal || dias < 1) {
                costoTotalInput.value = "";
                fechaInicioInput.value = "";
                fechaFinVisible.value  = "";
                btnReservar.disabled = true;
                fechaErrorMsg.style.display = "none";
                return;
            }

            const fi = new Date(fechaInicioVal + 'T08:00:00');

            const ff = new Date(fi);
            ff.setDate(ff.getDate() + dias);

            const formato = d => d.toISOString().slice(0,16);
            fechaInicioInput.value = formato(fi);
            fechaFinVisible.value  = formato(ff);

            const total = (dias * precioDia).toFixed(2);
            costoTotalInput.value = total;

            const disponible = verificarDisponibilidad(vehiculoId, fi, ff);
            btnReservar.disabled = !disponible;
            fechaErrorMsg.style.display = disponible ? "none" : "block";

            if (vehiculoId && fechaInicioVal && dias > 0) {
                const url = `/Reservas/VerificarDisponibilidad?vehiculoID=${vehiculoId}&fechaInicio=${formato(fi)}&fechaFin=${formato(ff)}`;

                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        if (data.disponible !== disponible) {
                            btnReservar.disabled = !data.disponible;
                            fechaErrorMsg.style.display = data.disponible ? "none" : "block";
                        }
                    })
                    .catch(error => console.error('Error verificando disponibilidad:', error));
            }
        }

        vehiculoSelect.addEventListener("change", actualizarReserva);
        fechaInicioDate.addEventListener("change", actualizarReserva);
        diasSelect.addEventListener("input", actualizarReserva);

        const fechaActual = new Date();
        fechaInicioDate.value = fechaActual.toISOString().split('T')[0];

        actualizarReserva();
    </script>
}